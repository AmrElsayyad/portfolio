{"status":"ok","feed":{"url":"https://medium.com/feed/@AmrElsayyad","title":"Stories by Amr ElSayyad on Medium","link":"https://medium.com/@AmrElsayyad?source=rss-4c09ae6ec531------2","author":"","description":"Stories by Amr ElSayyad on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*w4gBSsOe0Bq_3hTO"},"items":[{"title":"The Art of Clean Code: Writing Software That Stands the Test of Time","pubDate":"2024-06-22 13:47:13","link":"https://medium.com/@AmrElsayyad/the-art-of-clean-code-writing-software-that-stands-the-test-of-time-f9d0306bd783?source=rss-4c09ae6ec531------2","guid":"https://medium.com/p/f9d0306bd783","author":"Amr ElSayyad","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0pzXyBOYAcKFJxRE\"></figure><p>In the world of software development, writing code that works is just the beginning. To truly excel, developers must craft code that is maintainable, scalable, and easily understood by others, including your future\u00a0self.</p>\n<h3>What is Clean\u00a0Code?</h3>\n<p>At its core, clean code is all about readability and maintainability. It\u2019s the kind of code that\u2019s a breeze to understand, modify, and test. It\u2019s straightforward in its goals and avoids unnecessary complexity and any cryptic tricks. As <em>Robert C. Martin</em>, author of <em>Clean Code</em>, said, \u201cClean code always appears as if it was written by someone who\u00a0cares.\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wR6tkZIvM7bLWM3T\"></figure><h3>Key Principles of Clean\u00a0Code</h3>\n<p><strong>1. Meaningful Names:</strong> Use clear, descriptive names for variables, functions, and classes. A well-named function or variable should tell you what it does or what it represents without needing a\u00a0comment.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*287fn5usqsA67eUBzAEIjQ.png\"></figure><p><strong>2. Small Functions:</strong> Keep your functions short and focused. Each function should do one thing and do it well. This makes your code easier to understand, test, and\u00a0reuse.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XQPcPVLe7akYYZ6SkXH3XA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*33rnCcKSnVeEYIC6xmmYIQ.png\"></figure><p><strong>3. DRY (Don\u2019t Repeat Yourself):</strong> Avoid duplicating code. If you find yourself writing the same logic in multiple places, it\u2019s time to abstract that logic into a reusable function or\u00a0class.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U3hRvwUqwfMuBFSHvOnOpA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_WfwmyEyuLdWysWp4-ClvA.png\"></figure><p><strong>4. SOLID Principles:</strong> Follow the SOLID principles of object-oriented design:<br>- Single Responsibility Principle<br>- Open-Closed Principle<br>- Liskov Substitution Principle<br>- Interface Segregation Principle<br>- Dependency Inversion Principle</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nWPK98Re5W7uTS9UJls29A.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Bf8ZEvPs3T2_AyIrkT78pA.png\"></figure><p><strong>5. Comments:</strong> Use comments sparingly and only when necessary. Good code should be self-explanatory. If you need a comment to explain what your code does, consider refactoring the code to make it\u00a0clearer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eK-wAYG77C46b14F-dOd2Q.png\"></figure><p><strong>6. Formatting:</strong> Consistent formatting is crucial for maintaining readability and manageability in a codebase, especially in a collaborative environment. Tools like clang-format for <strong>C</strong>, google-java-format for <strong>Java</strong>, black for <strong>Python</strong>, or Prettier for <strong>JavaScript</strong> can automate this process, ensuring uniformity throughout the\u00a0project.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IiSUbRGVWVG-0ESm8m7mCA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RJ3_vcgYkHfi7prZSn6ZuQ.png\"></figure><p><strong>7. Error Handling:</strong> Graceful error handling and clear error messages are key to debugging and sustaining a healthy codebase. It\u2019s essential for a program to manage unforeseen events smoothly without crashing, while also offering valuable insights for troubleshooting problems.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Srgst45WLyywtuFYyenOAg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CbiDiIfcllMnJfsvZ2JODw.png\"></figure><p><strong>8. Unit Tests:</strong> Tests not only catch bugs early but also serve as documentation for how your code should behave. This also provides the assurance needed to refactor code with the confidence that these changes will not disrupt existing functionalities.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZXteWQPMnBYtvSyy492m5Q.png\"></figure><h3>Benefits of Clean\u00a0Code</h3>\n<ol>\n<li>\n<strong>Improved Maintainability:</strong> Clean code is easier to maintain and modify, reducing the cost of changes over\u00a0time.</li>\n<li>\n<strong>Better Collaboration:</strong> When code is clean and clear, it\u2019s easier for team members to understand and contribute to each other\u2019s\u00a0work.</li>\n<li>\n<strong>Fewer Bugs:</strong> Clean code tends to have fewer bugs because its simplicity leaves less room for errors to\u00a0hide.</li>\n<li>\n<strong>Faster Development:</strong> While writing clean code might take a bit more time upfront, it pays off in faster development speeds as your project\u00a0grows.</li>\n<li>\n<strong>Easier Onboarding:</strong> New team members can get up to speed more quickly when working with clean, well-structured code.</li>\n</ol>\n<h3>Conclusion</h3>\n<p>Writing clean code is not just a technical skill\u200a\u2014\u200ait\u2019s a mindset. It\u2019s about taking pride in your craft and considering the impact of your work on others. By consistently applying the principles of clean code, you can create software that not only works but also stands the test of time. Remember, code is read far more often than it is written, so always strive to write code that reads like well-written prose.</p>\n<p>Start your journey towards cleaner code today, and watch as it transforms not just your software but your entire approach to problem-solving in development.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9d0306bd783\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0pzXyBOYAcKFJxRE\"></figure><p>In the world of software development, writing code that works is just the beginning. To truly excel, developers must craft code that is maintainable, scalable, and easily understood by others, including your future\u00a0self.</p>\n<h3>What is Clean\u00a0Code?</h3>\n<p>At its core, clean code is all about readability and maintainability. It\u2019s the kind of code that\u2019s a breeze to understand, modify, and test. It\u2019s straightforward in its goals and avoids unnecessary complexity and any cryptic tricks. As <em>Robert C. Martin</em>, author of <em>Clean Code</em>, said, \u201cClean code always appears as if it was written by someone who\u00a0cares.\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wR6tkZIvM7bLWM3T\"></figure><h3>Key Principles of Clean\u00a0Code</h3>\n<p><strong>1. Meaningful Names:</strong> Use clear, descriptive names for variables, functions, and classes. A well-named function or variable should tell you what it does or what it represents without needing a\u00a0comment.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*287fn5usqsA67eUBzAEIjQ.png\"></figure><p><strong>2. Small Functions:</strong> Keep your functions short and focused. Each function should do one thing and do it well. This makes your code easier to understand, test, and\u00a0reuse.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XQPcPVLe7akYYZ6SkXH3XA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*33rnCcKSnVeEYIC6xmmYIQ.png\"></figure><p><strong>3. DRY (Don\u2019t Repeat Yourself):</strong> Avoid duplicating code. If you find yourself writing the same logic in multiple places, it\u2019s time to abstract that logic into a reusable function or\u00a0class.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U3hRvwUqwfMuBFSHvOnOpA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_WfwmyEyuLdWysWp4-ClvA.png\"></figure><p><strong>4. SOLID Principles:</strong> Follow the SOLID principles of object-oriented design:<br>- Single Responsibility Principle<br>- Open-Closed Principle<br>- Liskov Substitution Principle<br>- Interface Segregation Principle<br>- Dependency Inversion Principle</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nWPK98Re5W7uTS9UJls29A.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Bf8ZEvPs3T2_AyIrkT78pA.png\"></figure><p><strong>5. Comments:</strong> Use comments sparingly and only when necessary. Good code should be self-explanatory. If you need a comment to explain what your code does, consider refactoring the code to make it\u00a0clearer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eK-wAYG77C46b14F-dOd2Q.png\"></figure><p><strong>6. Formatting:</strong> Consistent formatting is crucial for maintaining readability and manageability in a codebase, especially in a collaborative environment. Tools like clang-format for <strong>C</strong>, google-java-format for <strong>Java</strong>, black for <strong>Python</strong>, or Prettier for <strong>JavaScript</strong> can automate this process, ensuring uniformity throughout the\u00a0project.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IiSUbRGVWVG-0ESm8m7mCA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RJ3_vcgYkHfi7prZSn6ZuQ.png\"></figure><p><strong>7. Error Handling:</strong> Graceful error handling and clear error messages are key to debugging and sustaining a healthy codebase. It\u2019s essential for a program to manage unforeseen events smoothly without crashing, while also offering valuable insights for troubleshooting problems.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Srgst45WLyywtuFYyenOAg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CbiDiIfcllMnJfsvZ2JODw.png\"></figure><p><strong>8. Unit Tests:</strong> Tests not only catch bugs early but also serve as documentation for how your code should behave. This also provides the assurance needed to refactor code with the confidence that these changes will not disrupt existing functionalities.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZXteWQPMnBYtvSyy492m5Q.png\"></figure><h3>Benefits of Clean\u00a0Code</h3>\n<ol>\n<li>\n<strong>Improved Maintainability:</strong> Clean code is easier to maintain and modify, reducing the cost of changes over\u00a0time.</li>\n<li>\n<strong>Better Collaboration:</strong> When code is clean and clear, it\u2019s easier for team members to understand and contribute to each other\u2019s\u00a0work.</li>\n<li>\n<strong>Fewer Bugs:</strong> Clean code tends to have fewer bugs because its simplicity leaves less room for errors to\u00a0hide.</li>\n<li>\n<strong>Faster Development:</strong> While writing clean code might take a bit more time upfront, it pays off in faster development speeds as your project\u00a0grows.</li>\n<li>\n<strong>Easier Onboarding:</strong> New team members can get up to speed more quickly when working with clean, well-structured code.</li>\n</ol>\n<h3>Conclusion</h3>\n<p>Writing clean code is not just a technical skill\u200a\u2014\u200ait\u2019s a mindset. It\u2019s about taking pride in your craft and considering the impact of your work on others. By consistently applying the principles of clean code, you can create software that not only works but also stands the test of time. Remember, code is read far more often than it is written, so always strive to write code that reads like well-written prose.</p>\n<p>Start your journey towards cleaner code today, and watch as it transforms not just your software but your entire approach to problem-solving in development.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9d0306bd783\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["best-practices","software-development","clean-code","solid-principles","programming"]},{"title":"Mastering Data Visualization: The Ultimate Guide to Choosing the Right Plot for Your Data","pubDate":"2024-06-21 16:09:38","link":"https://medium.com/@AmrElsayyad/mastering-data-visualization-the-ultimate-guide-to-choosing-the-right-plot-for-your-data-386ba91f5f38?source=rss-4c09ae6ec531------2","guid":"https://medium.com/p/386ba91f5f38","author":"Amr ElSayyad","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZKUsqB2IKLwa_g7B\"></figure><h4>A plot tells a thousand words, they\u00a0say.</h4>\n<p>Visualizing data is very helpful in drawing conclusions and insights from it. There are so many different types of plots that choosing the right one might be\u00a0tricky.</p>\n<p>Don\u2019t know which type of plot best represents your data? Here\u2019s a summary of the best types of plots for each type of\u00a0dataset.</p>\n<h3>Histograms</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/491/0*tMGqmeW-2S9vsih8\"></figure><p>A histogram is the best way to display the distribution of a continuous variable, i.e., when you have a continuous variable like age and the data shows the number of occurrences of that variable, like the number of rulers of England that started ruling at a particular age, a histogram can show you the number of rulers for each age\u00a0group.</p>\n<h3>Rose Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/344/0*IUbpagGiHHdhRsT1\"></figure><p>Rose Plots are a special type of histogram. They are used to display the distribution of data of cyclical nature. Cyclical data are data whose range starts and ends at the same point, e.g., time of day or compass direction. The plot shown represents the activity hours for some types of rodents. You can see that the longer the radius of a portion, the more active this type of rodent is at this hour of the\u00a0day.</p>\n<h3>Box Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/502/0*PGRsAzgRPZ7N4TEA\"></figure><p>Box Plots are the best way to display the distribution of a single continuous variable that needs to be plotted against a categorical variable. For example, comparing the age (continuous variable) at which a ruler of England started ruling for each royal house (categorical variable). The best thing about box plots is that, unlike histograms, they can show us multiple features of data at once, e.g., median, min, max, and interquartile range\u00a0(IQR).</p>\n<h4>But what is a boxplot in the first\u00a0place?</h4>\n<p>A box plot is a graphical representation where the central line of the box indicates the median value. The box itself is defined by the upper and lower quartile limits, meaning it encompasses the middle half of the data. The lines extending from the box, known as whiskers, denote the upper and lower quartiles. Essentially, the data is split into four quartiles: the second and third quartiles are contained within the box with the median marked in the center, while the first and fourth quartiles extend as whiskers. The box delineates the normal value range, the whiskers show the full range of values, and any points beyond the whiskers are considered outliers, indicating extreme\u00a0values.</p>\n<h3>Scatter Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/502/0*BeRoQ6a_NYN5bDHB\"></figure><p>Scatter Plots are used to show the relationship of two numerical variables. For example, the plot shown compares the price of residential properties in one state in the US and their area, which shows a direct relationship between the\u00a0two.</p>\n<h3>Bar Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/396/0*1vWbWeigS45WWwTu\"></figure><p>Bar plots are the best way to describe labels\u2019 counts of a categorical variable. For the example shown, the plot shows the number of players per country that are on the ESPN Top 100 list. Bar Plots can be vertical or horizontal. The choice of a horizontal one here is so the y-axis label can be readable.</p>\n<h3>Dot Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/307/0*fvwxLFbPPOI8R6-B\"></figure><p>Dot Plots are much like bar plots, but instead of showing one metric of a variable, e.g. count, they can show multiple features. One advantage of using dot plots is that they don\u2019t refer to zero, enabling us to take the logarithmic scale of the variables we plot. In the plot shown, you can see the number of followers of each player on Facebook, Instagram, and Twitter, represented by different dot colors. Also, you will find players grouped by sport and sorted by player\u00a0name.</p>\n<h3>Line Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/517/0*JqaQ1hKBI_eT2Gxv\"></figure><p>Line plots are the best way to display trends over time. In the plot shown, the number of confirmed cases in China and the rest of the world is plotted against time, which shows how the number of cases is changing over the time period of February and March 2020 and compares the numbers between China and the rest of the world using different colors.</p>\n<h3>What if you need to add more variables to your\u00a0plot?</h3>\n<p>Well, you can use size, transparency, shape, or line weight, but these options often make the plot harder to interpret. Using colors and multiple panels is often the best way to add more dimensions to your\u00a0plot.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/744/0*slUTf-NPt4vFrBQW\"></figure><h3>Types of Color\u00a0Scale</h3>\n<p>Using color may be the best way to add more variables to your plot. There are three different ways to use color for different situations:</p>\n<h4>Qualitative</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/377/0*bK12i93dIECdTFNe\"></figure><p>Using different colors to distinguish between different categories. The plot shown compares the adoption percentage of four different technologies over the time period of 1930 to\u00a01970.</p>\n<h4>Sequential</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/383/0*UleQqh3J-fR87jQQ\"></figure><p>Using different gradients of the same color to display multiple ranges of a continuous variable. The plot shown here displays the percentage of children eating a particular number of veggies per day from 2001 to 2018. Here you can see the number of veggies per day divided into portions. Each portion has a gradient of the same color; the darker the color, the more portions children eat per\u00a0day.</p>\n<h4>Diverging</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/316/0*Mo9ZVRqsAG_eFYY_\"></figure><p>Imagine a scale that visually represents survey data with two colors: blue and red. Each side of the scale uses a gradient that fades into a neutral hue at the center, effectively illustrating values above or below a central point. In this survey plot, the varying shades of blue and red correspond to the percentage of respondents who agree or disagree, providing a clear and impactful way to interpret the\u00a0data.</p>\n<h3>3 Plots for Comparing Many Variables</h3>\n<p>Sometimes, you need to compare a larger number of variables. Here are 3 plots for this\u00a0case:</p>\n<h3>Pair Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/458/0*8AA_Ne7SiiylCVoL\"></figure><p>Pair plots are incredibly useful when you need to compare up to 10 variables to understand the distribution of each and the relationships between them. The diagonal panels reveal the distribution of individual variables, with bar plots for categorical and histograms for continuous variables. The off-diagonal panels, on the other hand, display the relationships between variable pairs. Here, you\u2019ll find scatter plots and correlation coefficients for continuous variables, and for a mix of categorical and continuous variables, histograms and box plots segmented by category.</p>\n<h3>Correlation Heatmaps</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/438/0*Kc4byCDoinayllqP\"></figure><p>Correlation Heatmaps are useful for showing the correlation between many continuous variables. The stronger the correlation, the darker the color. Due to the compatibility of the heatmap, it can be used to display 10\u2019s of variables.</p>\n<h3>Parallel Coordinates Plot</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/589/0*nVYYAY8rNJ_Hclas\"></figure><p>A parallel coordinates plot can be very useful when trying to find patterns between multiple continuous variables or group them into clusters. Here you can easily see the range for each continuous variable, and you can see which has more consistency. You can also see which variable has high values and which has low\u00a0values.</p>\n<h3>Conclusion</h3>\n<p>Plots are very helpful when trying to understand your data. Bad plots can result in inaccurate conclusions. Choosing which type of plot is suitable for your data is very important. Hopefully, this article will help you distinguish between different types of plots, and which one to choose for each situation. If this article was helpful, please let me\u00a0know.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=386ba91f5f38\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZKUsqB2IKLwa_g7B\"></figure><h4>A plot tells a thousand words, they\u00a0say.</h4>\n<p>Visualizing data is very helpful in drawing conclusions and insights from it. There are so many different types of plots that choosing the right one might be\u00a0tricky.</p>\n<p>Don\u2019t know which type of plot best represents your data? Here\u2019s a summary of the best types of plots for each type of\u00a0dataset.</p>\n<h3>Histograms</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/491/0*tMGqmeW-2S9vsih8\"></figure><p>A histogram is the best way to display the distribution of a continuous variable, i.e., when you have a continuous variable like age and the data shows the number of occurrences of that variable, like the number of rulers of England that started ruling at a particular age, a histogram can show you the number of rulers for each age\u00a0group.</p>\n<h3>Rose Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/344/0*IUbpagGiHHdhRsT1\"></figure><p>Rose Plots are a special type of histogram. They are used to display the distribution of data of cyclical nature. Cyclical data are data whose range starts and ends at the same point, e.g., time of day or compass direction. The plot shown represents the activity hours for some types of rodents. You can see that the longer the radius of a portion, the more active this type of rodent is at this hour of the\u00a0day.</p>\n<h3>Box Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/502/0*PGRsAzgRPZ7N4TEA\"></figure><p>Box Plots are the best way to display the distribution of a single continuous variable that needs to be plotted against a categorical variable. For example, comparing the age (continuous variable) at which a ruler of England started ruling for each royal house (categorical variable). The best thing about box plots is that, unlike histograms, they can show us multiple features of data at once, e.g., median, min, max, and interquartile range\u00a0(IQR).</p>\n<h4>But what is a boxplot in the first\u00a0place?</h4>\n<p>A box plot is a graphical representation where the central line of the box indicates the median value. The box itself is defined by the upper and lower quartile limits, meaning it encompasses the middle half of the data. The lines extending from the box, known as whiskers, denote the upper and lower quartiles. Essentially, the data is split into four quartiles: the second and third quartiles are contained within the box with the median marked in the center, while the first and fourth quartiles extend as whiskers. The box delineates the normal value range, the whiskers show the full range of values, and any points beyond the whiskers are considered outliers, indicating extreme\u00a0values.</p>\n<h3>Scatter Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/502/0*BeRoQ6a_NYN5bDHB\"></figure><p>Scatter Plots are used to show the relationship of two numerical variables. For example, the plot shown compares the price of residential properties in one state in the US and their area, which shows a direct relationship between the\u00a0two.</p>\n<h3>Bar Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/396/0*1vWbWeigS45WWwTu\"></figure><p>Bar plots are the best way to describe labels\u2019 counts of a categorical variable. For the example shown, the plot shows the number of players per country that are on the ESPN Top 100 list. Bar Plots can be vertical or horizontal. The choice of a horizontal one here is so the y-axis label can be readable.</p>\n<h3>Dot Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/307/0*fvwxLFbPPOI8R6-B\"></figure><p>Dot Plots are much like bar plots, but instead of showing one metric of a variable, e.g. count, they can show multiple features. One advantage of using dot plots is that they don\u2019t refer to zero, enabling us to take the logarithmic scale of the variables we plot. In the plot shown, you can see the number of followers of each player on Facebook, Instagram, and Twitter, represented by different dot colors. Also, you will find players grouped by sport and sorted by player\u00a0name.</p>\n<h3>Line Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/517/0*JqaQ1hKBI_eT2Gxv\"></figure><p>Line plots are the best way to display trends over time. In the plot shown, the number of confirmed cases in China and the rest of the world is plotted against time, which shows how the number of cases is changing over the time period of February and March 2020 and compares the numbers between China and the rest of the world using different colors.</p>\n<h3>What if you need to add more variables to your\u00a0plot?</h3>\n<p>Well, you can use size, transparency, shape, or line weight, but these options often make the plot harder to interpret. Using colors and multiple panels is often the best way to add more dimensions to your\u00a0plot.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/744/0*slUTf-NPt4vFrBQW\"></figure><h3>Types of Color\u00a0Scale</h3>\n<p>Using color may be the best way to add more variables to your plot. There are three different ways to use color for different situations:</p>\n<h4>Qualitative</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/377/0*bK12i93dIECdTFNe\"></figure><p>Using different colors to distinguish between different categories. The plot shown compares the adoption percentage of four different technologies over the time period of 1930 to\u00a01970.</p>\n<h4>Sequential</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/383/0*UleQqh3J-fR87jQQ\"></figure><p>Using different gradients of the same color to display multiple ranges of a continuous variable. The plot shown here displays the percentage of children eating a particular number of veggies per day from 2001 to 2018. Here you can see the number of veggies per day divided into portions. Each portion has a gradient of the same color; the darker the color, the more portions children eat per\u00a0day.</p>\n<h4>Diverging</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/316/0*Mo9ZVRqsAG_eFYY_\"></figure><p>Imagine a scale that visually represents survey data with two colors: blue and red. Each side of the scale uses a gradient that fades into a neutral hue at the center, effectively illustrating values above or below a central point. In this survey plot, the varying shades of blue and red correspond to the percentage of respondents who agree or disagree, providing a clear and impactful way to interpret the\u00a0data.</p>\n<h3>3 Plots for Comparing Many Variables</h3>\n<p>Sometimes, you need to compare a larger number of variables. Here are 3 plots for this\u00a0case:</p>\n<h3>Pair Plots</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/458/0*8AA_Ne7SiiylCVoL\"></figure><p>Pair plots are incredibly useful when you need to compare up to 10 variables to understand the distribution of each and the relationships between them. The diagonal panels reveal the distribution of individual variables, with bar plots for categorical and histograms for continuous variables. The off-diagonal panels, on the other hand, display the relationships between variable pairs. Here, you\u2019ll find scatter plots and correlation coefficients for continuous variables, and for a mix of categorical and continuous variables, histograms and box plots segmented by category.</p>\n<h3>Correlation Heatmaps</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/438/0*Kc4byCDoinayllqP\"></figure><p>Correlation Heatmaps are useful for showing the correlation between many continuous variables. The stronger the correlation, the darker the color. Due to the compatibility of the heatmap, it can be used to display 10\u2019s of variables.</p>\n<h3>Parallel Coordinates Plot</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/589/0*nVYYAY8rNJ_Hclas\"></figure><p>A parallel coordinates plot can be very useful when trying to find patterns between multiple continuous variables or group them into clusters. Here you can easily see the range for each continuous variable, and you can see which has more consistency. You can also see which variable has high values and which has low\u00a0values.</p>\n<h3>Conclusion</h3>\n<p>Plots are very helpful when trying to understand your data. Bad plots can result in inaccurate conclusions. Choosing which type of plot is suitable for your data is very important. Hopefully, this article will help you distinguish between different types of plots, and which one to choose for each situation. If this article was helpful, please let me\u00a0know.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=386ba91f5f38\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["data-science","big-data","data-analytics","data-visualization","machine-learning"]}]}